LeetCode Problem-Day 1 (6/18/2025)
Two Sum Problem:Given an array of integers nums and an integer target. Return the indices(0 - indexed) of two elements in nums such that they add up to target.
Each input will have exactly one solution, and the same element cannot be used twice. Return the answer in any order
Examples:
Input: nums = [1, 6, 2, 10, 3], target = 7
Output: [0, 1]
Explanation: nums[0] + nums[1] = 1 + 6 = 7
Input: nums = [1, 3, 5, -7, 6, -3], target = 0
Output: [1, 5]
Explanation: nums[1] + nums[5] = 3 + (-3) = 0 
Simple Brute Force:
for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{};
Binary Search: 
This works only if we can sort the array we can print the indexes in any manner
        Arrays.sort(nums);
        int low=0,high=nums.length-1;
        while(low<=high){
            int sum = nums[low]+nums[high];
            if(sum == target)
                return new int[]{low,high};
            }
            else if(sum > target){
                high=high-1;
            }
            else{
                low=low+1;
            }
        }
        return new int[]{};
HashMap:
public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int low=0;low<nums.length;low++){
            int high = target-nums[low];
            if(map.containsKey(high)){
            return new int[]{map.get(high),low};
        }
        map.put(nums[low],low);
    }
    return new int[]{};
    }